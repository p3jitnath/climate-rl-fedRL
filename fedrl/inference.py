import importlib
import os
import pickle
import random
import sys
import time
from dataclasses import dataclass

import fedrl_climate_envs
import gymnasium as gym
import numpy as np
import torch
import tyro
from torch.utils.tensorboard import SummaryWriter

BASE_DIR = "/gws/nopw/j04/ai4er/users/pn341/climate-rl-fedrl"
sys.path.append(BASE_DIR)

os.environ["WANDB__SERVICE_WAIT"] = "600"
os.environ["MUJOCO_GL"] = "egl"
date = time.strftime("%Y-%m-%d", time.gmtime(time.time()))


@dataclass
class Args:
    exp_name: str = "fedRL_inference_torch"
    """the name of this experiment"""
    seed: int = 1
    """seed of the experiment"""
    torch_deterministic: bool = True
    """if toggled, `torch.backends.cudnn.deterministic=False`"""
    cuda: bool = True
    """if toggled, cuda will be enabled by default"""
    track: bool = False
    """if toggled, this experiment will be tracked with Weights and Biases"""
    wandb_project_name: str = "cleanRL"
    """the wandb's project name"""
    wandb_entity: str = "personal-p3jitnath"
    """the entity (team) of wandb's project"""
    wandb_group: str = date
    """the group name under wandb's project"""
    capture_video: bool = True
    """whether to capture videos of the agent performances (check out `videos` folder)"""
    capture_video_freq: int = 100
    """episode frequency at which to capture video"""

    env_id: str = "EnergyBalanceModel-v2"
    """the environment id of the environment"""
    algo: str = "ddpg"
    """the RL algorithm to be used"""
    total_timesteps: int = 200
    """total timesteps of the experiments"""

    actor_layer_size: int = 256
    """layer size for the actor network"""

    num_steps: int = 200
    """the number of steps to run in each environment per policy rollout"""
    record_steps: bool = False
    """whether to record steps for policy analysis"""
    flwr_actor: bool = True
    """whether to use actor network weights"""
    flwr_critics: bool = False
    """whether to use critic network weights"""

    weights_path: str
    """path to load the actor network weights"""


def make_env(
    env_id, seed, cid, idx, capture_video, run_name, capture_video_freq
):
    def thunk():
        if capture_video and idx == 0:
            try:
                env = gym.make(
                    env_id, seed=seed, cid=cid, render_mode="rgb_array"
                )
            except TypeError:
                env = gym.make(env_id, render_mode="rgb_array")
            env = gym.wrappers.RecordVideo(
                env,
                f"{BASE_DIR}/videos/{run_name}",
                episode_trigger=lambda x: (x == 0)
                or (
                    x % capture_video_freq == (capture_video_freq - 1)
                ),  # add 1 to the episode count generated by gym
            )
        else:
            try:
                env = gym.make(env_id, seed=seed, cid=cid)
            except TypeError:
                env = gym.make(env_id)
        env = gym.wrappers.RecordEpisodeStatistics(env)
        env.action_space.seed(seed)
        return env

    return thunk


def get_actor(algo):
    module_path = f"rl-algos.{algo}.{algo}_actor"
    actor_module = importlib.import_module(module_path)
    Actor = getattr(actor_module, "Actor")
    return Actor


args = tyro.cli(Args)
run_name = f"{args.wandb_group}/{args.env_id}__{args.exp_name}__{args.algo}__{args.seed}__{int(time.time())}"

if args.record_steps:
    steps_folder = f"{BASE_DIR}/steps/{run_name}"
    os.makedirs(steps_folder, exist_ok=True)
    steps_buffer = []

if args.track:
    import wandb

    wandb.init(
        project=args.wandb_project_name,
        entity=args.wandb_entity,
        group=args.wandb_group,
        sync_tensorboard=True,
        config=vars(args),
        name=run_name,
        monitor_gym=True,
        save_code=True,
    )

writer = SummaryWriter(f"{BASE_DIR}/runs/{run_name}")

writer.add_text(
    "hyperparameters",
    "|param|value|\n|-|-|\n%s"
    % ("\n".join([f"|{key}|{value}|" for key, value in vars(args).items()])),
)

random.seed(args.seed)
np.random.seed(args.seed)
torch.manual_seed(args.seed)
torch.backends.cudnn.deterministic = args.torch_deterministic

device = torch.device(
    "cuda" if torch.cuda.is_available() and args.cuda else "cpu"
)
print(f"device: {device}", flush=True)
print(f"actor layer size: {args.actor_layer_size}", flush=True)

# 0. env setup
envs = gym.vector.SyncVectorEnv(
    [
        make_env(
            args.env_id,
            args.seed,
            args.flwr_client,
            0,
            args.capture_video,
            run_name,
            args.capture_video_freq,
        )
    ]
)
assert isinstance(
    envs.single_action_space, gym.spaces.Box
), "only continuous action space is supported"

Actor = get_actor(args.algo)
actor = Actor(envs, args.actor_layer_size).to(device)
if args.weights_path:
    actor.load_state_dict(torch.load(args.weights_path, device))

envs.single_observation_space.dtype = np.float32
start_time = time.time()

# 1. start the game
obs, _ = envs.reset(seed=args.seed)
for global_step in range(1, args.total_timesteps + 1):

    # 2. retrieve action(s)
    with torch.no_grad():
        actions = actor(torch.Tensor(obs).to(device))
        actions = (
            actions.cpu()
            .numpy()
            .clip(envs.single_action_space.low, envs.single_action_space.high)
        )

    # 3. execute the game and log data
    next_obs, rewards, terminations, truncations, infos = envs.step(actions)

    if "final_info" in infos:
        for info in infos["final_info"]:
            print(
                f"seed={args.seed}, global_step={global_step}, episodic_return={info['episode']['r']}",
                flush=True,
            )
            writer.add_scalar(
                "charts/episodic_return", info["episode"]["r"], global_step
            )
            writer.add_scalar(
                "charts/episodic_length", info["episode"]["l"], global_step
            )
            break

    real_next_obs = next_obs.copy()
    for idx, trunc in enumerate(truncations):
        if trunc:
            real_next_obs[idx] = infos["final_observation"][idx]

    obs = next_obs

    if args.record_steps:
        step_info = {
            "global_step": global_step,
            "actions": actions,
            "next_obs": next_obs,
            "rewards": rewards,
        }
        steps_buffer += [step_info]
        if global_step % args.num_steps == (args.num_steps - 1):
            with open(f"{steps_folder}/step_{global_step}.pkl", "wb") as file:
                pickle.dump(
                    steps_buffer,
                    file,
                )
            steps_buffer = []

envs.close()
writer.close()
